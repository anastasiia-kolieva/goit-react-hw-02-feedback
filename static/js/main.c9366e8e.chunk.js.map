{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","data/categoriesOfFeedback.js","App.js","index.js"],"names":["module","exports","Section","title","children","className","s","FeedbackButton","feedback","onLeaveFeedback","type","button","data-feedback","onClick","FeedbackOptions","options","map","option","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","list","item","categories","App","state","addFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,sBCAzDD,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,gC,6JCebC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,oBAAIC,UAAWC,IAAEH,MAAjB,SAAyBA,IACxBC,M,gBCJDG,EAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAClC,OACE,wBACEC,KAAK,SACLL,UAAWC,IAAEK,OACbC,gBAAeJ,EACfK,QAASJ,EAJX,SAMGD,KAoBQM,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASN,EAAsB,EAAtBA,gBAClC,OAAOM,EAAQC,KAAI,SAAAC,GAAM,OACvB,cAAC,EAAD,CAEET,SAAUS,EACVR,gBAAiBA,GAFZQ,O,iBCbIC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,sBAAMd,UAAWC,IAAEa,QAAnB,SAA6BA,K,gBCuBvBC,EArBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAEE,cADA,CACA,sBAEGD,EAAQ,GACP,qBAAInB,UAAWC,IAAEoB,KAAjB,UACE,qBAAIrB,UAAWC,IAAEqB,KAAjB,mBAA8BN,KAC9B,qBAAIhB,UAAWC,IAAEqB,KAAjB,sBAAiCL,KACjC,qBAAIjB,UAAWC,IAAEqB,KAAjB,kBAA6BJ,KAC7B,qBAAIlB,UAAWC,IAAEqB,KAAjB,oBAA+BH,KAC/B,qBAAInB,UAAWC,IAAEqB,KAAjB,gCAA2CF,QAKpC,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,0BCnB7BS,EAFI,CAAC,OAAQ,UAAW,OC+DxBC,E,4MAxDbC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAIPQ,YAAc,YAAiB,IAErBvB,EAFoB,EAAbwB,OAEaC,QAApBzB,SAGR,EAAK0B,UAAS,SAAAC,GAAS,sBAAQ3B,EAAW2B,EAAU3B,GAAY,O,EAGlE4B,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBT,KADiB,EACXC,QADW,EACFC,K,EAIzBc,gCAAkC,WAAO,IAC/BhB,EAAS,EAAKS,MAAdT,KACFG,EAAQ,EAAKY,qBAEnB,OAAOZ,EAAQc,KAAKC,MAAOlB,EAAOG,EAAS,KAAO,G,uDAK1C,IAAD,EACwBgB,KAAKV,MAA5BT,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQgB,KAAKJ,qBACbX,EAAqBe,KAAKH,kCAChC,OACE,gCACE,cAAC,EAAD,CAASlC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEY,QAASa,EACTnB,gBAAiB+B,KAAKT,gBAI1B,cAAC,EAAD,CAAS5B,MAAM,aAAf,SACE,cAAC,EAAD,CACEkB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GAjDdgB,a,MCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.c9366e8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__2E6cv\",\"item\":\"Statistics_item__1FJg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__25RTp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__19Z0C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__3RdY9\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackButton = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <button\n      type=\"button\"\n      className={s.button}\n      data-feedback={feedback}\n      onClick={onLeaveFeedback}\n    >\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <FeedbackButton\n      key={option}\n      feedback={option}\n      onLeaveFeedback={onLeaveFeedback}\n    />\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import s from './Notification.module.css';\n\nconst Notification = ({ message }) => {\n  return <span className={s.message}>{message}</span>;\n};\n\nexport default Notification;\n","// import PropTypes from 'prop-types';\n\nimport Notification from '../Notification/Notification';\nimport s from './Statistics.module.css';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    //   react фрагмент: https://ru.reactjs.org/docs/fragments.html#short-syntax\n    <>\n      {/* Если total>0, тогда рендерится список */}\n      {total > 0 && (\n        <ul className={s.list}>\n          <li className={s.item}>Good: {good}</li>\n          <li className={s.item}>Neutral: {neutral}</li>\n          <li className={s.item}>Bad: {bad}</li>\n          <li className={s.item}>Total: {total}</li>\n          <li className={s.item}>Positive feedback: {positivePercentage}</li>\n        </ul>\n      )}\n\n      {/* если total=0, отображается сообщение */}\n      {total === 0 && <Notification message=\"No feedback given\" />}\n    </>\n  );\n};\n\nexport default Statistics;\n","const categories = ['good', 'neutral', 'bad'];\n\nexport default categories;\n","import { Component } from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport categories from './data/categoriesOfFeedback.js';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  // Приходит событие.Деструктуризация, определение того что именно на кнопку нажали event.target\n  addFeedback = ({ target }) => {\n    // деструктуризация=>определение на какую конкретно кнопку нажали по data атрибуту feedback ????????\n    const { feedback } = target.dataset;\n    // стрелочная функция вовзращает обьект/слайс, например{'good'(значение свойства feedback [feedback]) : prevState\n    // именно кнопки с дата-атрибутом feedback + 1}\n    this.setState(prevState => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    // если total>0 тогда идёт вичисление, если меньне нуля, тогда %позитивных отзывов равен нулю\n    return total ? Math.round((good / total) * 100) : 0;\n    // Или ещё вариант:  Math.round(good / total) * 100 || 0;\n    // \"||\" возвращает первое истинное значение или последнее, если такое значение не найдено.\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={categories}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}