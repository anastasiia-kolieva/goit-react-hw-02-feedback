{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","data/categoriesOfFeedback.js","App.js","index.js"],"names":["Section","title","children","FeedbackButton","feedback","onLeaveFeedback","type","className","data-feedback","onClick","FeedbackOptions","options","map","option","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","categories","App","state","addFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"uPAeeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCJDC,EAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAClC,OACE,wBACEC,KAAK,SACLC,UAAU,SACVC,gBAAeJ,EACfK,QAASJ,EAJX,SAMGD,KAoBQM,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASN,EAAsB,EAAtBA,gBAClC,OAAOM,EAAQC,KAAI,SAAAC,GAAM,OACvB,cAAC,EAAD,CAEET,SAAUS,EACVR,gBAAiBA,GAFZQ,OCdIC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,+BAAOA,KCwBDC,EArBI,SAACC,EAAMC,EAASC,EAAKC,EAAOC,GAC7C,OAEE,cADA,CACA,sBAEGD,EAAQ,GACP,+BACE,wCAAWH,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,QAKjB,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,0BClB7BO,EAFI,CAAC,OAAQ,UAAW,OC8DxBC,E,4MAvDbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAIPM,YAAc,YAAiB,IAErBrB,EAFoB,EAAbsB,OAEaC,QAApBvB,SAGR,EAAKwB,UAAS,SAAAC,GAAS,sBAAQzB,EAAWyB,EAAUzB,GAAY,O,EAGlE0B,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBP,KADiB,EACXC,QADW,EACFC,K,EAIzBY,gCAAkC,WAAO,IAC/Bd,EAAS,EAAKO,MAAdP,KACFG,EAAQ,EAAKU,qBAEnB,OAAOV,EAAQY,KAAKC,MAAOhB,EAAOG,EAAS,KAAO,G,uDAK1C,IAAD,EACwBc,KAAKV,MAA5BP,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQc,KAAKJ,qBACbT,EAAqBa,KAAKH,kCAChC,OACE,gCACE,cAAC,EAAD,CAAS9B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEU,QAASW,EACTjB,gBAAiB6B,KAAKT,gBAG1B,cAAC,EAAD,CAASxB,MAAM,aAAf,SACE,cAAC,EAAD,CACEgB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GAhDdc,a,MCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.2735616f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nconst FeedbackButton = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <button\n      type=\"button\"\n      className=\"button\"\n      data-feedback={feedback}\n      onClick={onLeaveFeedback}\n    >\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <FeedbackButton\n      key={option}\n      feedback={option}\n      onLeaveFeedback={onLeaveFeedback}\n    />\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","const Notification = ({ message }) => {\n  return <span>{message}</span>;\n};\n\nexport default Notification;\n","// import PropTypes from 'prop-types';\n\nimport Notification from '../Notification/Notification';\n\nconst Statistics = (good, neutral, bad, total, positivePercentage) => {\n  return (\n    //   react фрагмент: https://ru.reactjs.org/docs/fragments.html#short-syntax\n    <>\n      {/* Если total>0, тогда рендерится список */}\n      {total > 0 && (\n        <ul>\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad: {bad}</li>\n          <li>Total: {total}</li>\n          <li>Positive feedback: {positivePercentage}</li>\n        </ul>\n      )}\n\n      {/* если total=0, отображается сообщение */}\n      {total === 0 && <Notification message=\"No feedback given\" />}\n    </>\n  );\n};\n\nexport default Statistics;\n","const categories = ['good', 'neutral', 'bad'];\n\nexport default categories;\n","import { Component } from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport categories from './data/categoriesOfFeedback.js';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  // Приходит событие.Деструктуризация, определение того что именно на кнопку нажали event.target\n  addFeedback = ({ target }) => {\n    // деструктуризация=>определение на какую конкретно кнопку нажали по data атрибуту feedback ????????\n    const { feedback } = target.dataset;\n    // стрелочная функция вовзращает обьект/слайс, например{'good'(значение свойства feedback [feedback]) : prevState\n    // именно кнопки с дата-атрибутом feedback + 1}\n    this.setState(prevState => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    // если total>0 тогда идёт вичисление, если меньне нуля, тогда %позитивных отзывов равен нулю\n    return total ? Math.round((good / total) * 100) : 0;\n    // Или ещё вариант:  Math.round(good / total) * 100 || 0;\n    // \"||\" возвращает первое истинное значение или последнее, если такое значение не найдено.\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={categories}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}